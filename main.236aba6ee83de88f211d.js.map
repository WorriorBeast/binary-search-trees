{"version":3,"file":"main.236aba6ee83de88f211d.js","mappings":"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","sources":["webpack://setup/./src/index.js"],"sourcesContent":["//import './style.css';\n\nclass Node {\n\tconstructor(value) {\n\t\tthis.value = value;\n\t\tthis.left = null;\n\t\tthis.right = null;\n\t}\n}\n\nclass Tree {\n\tconstructor(array) {\n\t\tthis.root = this.buildTree(array);\n\t}\n\n\tbuildTree(array) {\n\t\tif (array.length === 0) return null;\n\n\t\tconst uniqueArray = [...new Set(array)].sort((a, b) => {\n\t\t\treturn a - b;\n\t\t});\n\t\tconst middle = Math.floor(uniqueArray.length / 2);\n\t\tconst root = new Node(uniqueArray[middle]);\n\n\t\troot.left = this.buildTree(uniqueArray.slice(0, middle));\n\t\troot.right = this.buildTree(uniqueArray.slice(middle + 1));\n\n\t\treturn root;\n\t}\n\n\tinsert(value) {\n\t\tlet parent;\n\t\tlet current = this.root;\n\n\t\twhile (current) {\n\t\t\tparent = current;\n\n\t\t\tif (current.value > value) {\n\t\t\t\tcurrent = current.left;\n\t\t\t} else if (current.value < value) {\n\t\t\t\tcurrent = current.right;\n\t\t\t}\n\t\t}\n\n\t\tif (parent.value === value) return;\n\n\t\tconst node = new Node(value);\n\n\t\tif (parent.value > value) {\n\t\t\tparent.left = node;\n\t\t} else {\n\t\t\tparent.right = node;\n\t\t}\n\n\t\treturn this.root;\n\t}\n\n\tdeleteItem(value) {\n\t\tif (!this.root) return null;\n\n\t\tlet previous = null;\n\t\tlet current = this.root;\n\n\t\twhile (current && current.value !== value) {\n\t\t\tprevious = current;\n\n\t\t\tif (current.value > value) {\n\t\t\t\tcurrent = current.left;\n\t\t\t} else if (current.value < value) {\n\t\t\t\tcurrent = current.right;\n\t\t\t}\n\t\t}\n\n\t\tif (!current) return this.root;\n\n\t\tif (!current.left || !current.right) {\n\t\t\tlet newCurrent = !current.left ? current.right : current.left;\n\n\t\t\tif (!previous) {\n\t\t\t\tthis.root = newCurrent;\n\t\t\t} else if (previous.left === current) {\n\t\t\t\tprevious.left = newCurrent;\n\t\t\t} else if (previous.right === current) {\n\t\t\t\tprevious.right = newCurrent;\n\t\t\t}\n\t\t} else if (current.left && current.right) {\n\t\t\tlet successor = current.right;\n\t\t\tlet successorParent = null;\n\n\t\t\twhile (successor.left) {\n\t\t\t\tsuccessorParent = successor;\n\t\t\t\tsuccessor = successor.left;\n\t\t\t}\n\n\t\t\tif (successorParent) {\n\t\t\t\tsuccessorParent.left = successor.right;\n\t\t\t} else {\n\t\t\t\tcurrent.right = successor.right;\n\t\t\t}\n\n\t\t\tcurrent.value = successor.value;\n\t\t}\n\n\t\treturn this.root;\n\t}\n\n\tfind(value) {\n\t\tlet current = this.root;\n\n\t\twhile (current && current.value !== value) {\n\t\t\tif (current.value > value) {\n\t\t\t\tcurrent = current.left;\n\t\t\t} else {\n\t\t\t\tcurrent = current.right;\n\t\t\t}\n\t\t}\n\n\t\tif (!current) return null;\n\n\t\treturn current;\n\t}\n\n\tlevelOrderIterative(callback) {\n\t\tif (typeof callback !== 'function') {\n\t\t\tthrow new TypeError(\n\t\t\t\t'A callback function must be passed into function',\n\t\t\t);\n\t\t}\n\n\t\tif (!this.root) return null;\n\n\t\tlet queue = [this.root];\n\n\t\twhile (queue.length) {\n\t\t\tconst node = queue.shift();\n\n\t\t\tcallback(node);\n\n\t\t\tif (node.left) queue.push(node.left);\n\t\t\tif (node.right) queue.push(node.right);\n\t\t}\n\t}\n\n\tlevelOrderRecursive(callback) {\n\t\tif (typeof callback !== 'function') {\n\t\t\tthrow new TypeError(\n\t\t\t\t'A callback function must be passed into function',\n\t\t\t);\n\t\t}\n\n\t\tif (!this.root) return null;\n\n\t\tconst CURRENTLEVEL = 0;\n\t\tlet result = [];\n\n\t\tconst traverse = (node, level) => {\n\t\t\tif (!node) return;\n\n\t\t\tif (!result[level]) result[level] = [];\n\n\t\t\tresult[level].push(node);\n\n\t\t\ttraverse(node.left, level + 1);\n\t\t\ttraverse(node.right, level + 1);\n\t\t};\n\n\t\ttraverse(this.root, CURRENTLEVEL);\n\n\t\tconst mergedLevels = [].concat(...result);\n\n\t\tmergedLevels.forEach((node) => {\n\t\t\tcallback(node);\n\t\t});\n\t}\n\n\tinOrder(callback) {\n\t\tif (typeof callback !== 'function') {\n\t\t\tthrow new TypeError(\n\t\t\t\t'A callback function must be passed into function',\n\t\t\t);\n\t\t}\n\n\t\tconst traverse = (node) => {\n\t\t\tif (!node) return;\n\n\t\t\ttraverse(node.left);\n\t\t\tcallback(node);\n\t\t\ttraverse(node.right);\n\t\t};\n\n\t\ttraverse(this.root);\n\t}\n\n\tpreOrder(callback) {\n\t\tif (typeof callback !== 'function') {\n\t\t\tthrow new TypeError(\n\t\t\t\t'A callback function must be passed into function',\n\t\t\t);\n\t\t}\n\n\t\tconst traverse = (node) => {\n\t\t\tif (!node) return;\n\n\t\t\tcallback(node);\n\t\t\ttraverse(node.left);\n\t\t\ttraverse(node.right);\n\t\t};\n\n\t\ttraverse(this.root);\n\t}\n\n\tpostOrder(callback) {\n\t\tif (typeof callback !== 'function') {\n\t\t\tthrow new TypeError(\n\t\t\t\t'A callback function must be passed into function',\n\t\t\t);\n\t\t}\n\n\t\tconst traverse = (node) => {\n\t\t\tif (!node) return;\n\n\t\t\ttraverse(node.left);\n\t\t\ttraverse(node.right);\n\t\t\tcallback(node);\n\t\t};\n\n\t\ttraverse(this.root);\n\t}\n\n\theight(node) {\n\t\tif (!node) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\tconst leftHeight = this.height(node.left);\n\t\t\tconst rightHeight = this.height(node.right);\n\n\t\t\treturn Math.max(leftHeight, rightHeight) + 1;\n\t\t}\n\t}\n\n\tdepth(node) {\n\t\tif (!node) return -1;\n\n\t\tlet current = this.root;\n\t\tlet depth = 0;\n\n\t\twhile (current && current !== node) {\n\t\t\tif (current.value > node.value) {\n\t\t\t\tcurrent = current.left;\n\t\t\t\tdepth++;\n\t\t\t} else {\n\t\t\t\tcurrent = current.right;\n\t\t\t\tdepth++;\n\t\t\t}\n\t\t}\n\n\t\tif (!current) return -1;\n\n\t\treturn depth;\n\t}\n\n\tisBalanced() {\n\t\tif (!this.root) return false;\n\n\t\tconst leftHeight = this.height(this.root.left);\n\t\tconst rightHeight = this.height(this.root.right);\n\n\t\tconst heightDifference =\n\t\t\tMath.max(leftHeight, rightHeight) - Math.min(leftHeight, rightHeight);\n\n\t\treturn heightDifference > 1 ? false : true;\n\t}\n\n\trebalance() {\n\t\tconst inOrderArray = [];\n\n\t\tthis.inOrder((node) => inOrderArray.push(node.value));\n\n\t\tthis.root = this.buildTree(inOrderArray);\n\t}\n}\n\nconst randomNum = () => {\n\treturn Math.floor(Math.random() * 100);\n};\n\nconst generateArray = () => {\n\tconst array = [];\n\n\tfor (let i = 0; i < 32; i++) {\n\t\tarray.push(randomNum());\n\t}\n\n\treturn array;\n};\n\nconst driver = () => {\n\tconst array = generateArray();\n\tconst tree = new Tree(array);\n\tlet preOrderArray = [];\n\tlet inOrderArray = [];\n\tlet postOrderArray = [];\n\n\ttree.preOrder((node) => preOrderArray.push(node.value));\n\ttree.inOrder((node) => inOrderArray.push(node.value));\n\ttree.postOrder((node) => postOrderArray.push(node.value));\n\n\tconsole.log(tree.isBalanced());\n\tconsole.log(preOrderArray);\n\tconsole.log(inOrderArray);\n\tconsole.log(postOrderArray);\n\n\ttree.insert(101);\n\ttree.insert(102);\n\ttree.insert(103);\n\ttree.insert(104);\n\ttree.insert(105);\n\n\tconsole.log(tree.isBalanced());\n\n\ttree.rebalance();\n\n\tconsole.log(tree.isBalanced());\n\n\tpreOrderArray = [];\n\tinOrderArray = [];\n\tpostOrderArray = [];\n\n\ttree.preOrder((node) => preOrderArray.push(node.value));\n\ttree.inOrder((node) => inOrderArray.push(node.value));\n\ttree.postOrder((node) => postOrderArray.push(node.value));\n\n\tconsole.log(preOrderArray);\n\tconsole.log(inOrderArray);\n\tconsole.log(postOrderArray);\n};\n\ndriver();\n"],"names":["Node","constructor","value","this","left","right","Tree","array","root","buildTree","length","uniqueArray","Set","sort","a","b","middle","Math","floor","slice","insert","parent","current","node","deleteItem","previous","successor","successorParent","newCurrent","find","levelOrderIterative","callback","TypeError","queue","shift","push","levelOrderRecursive","result","traverse","level","concat","forEach","inOrder","preOrder","postOrder","height","leftHeight","rightHeight","max","depth","isBalanced","min","rebalance","inOrderArray","i","random","generateArray","tree","preOrderArray","postOrderArray","console","log","driver"],"sourceRoot":""}